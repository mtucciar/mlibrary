/*! MTucciarone Music Library -  - com.mtucciarone.mlibrary - v1.0.0 - 2016-06-29 */!function() {
    "use strict";
    angular.module("app", [ "app.core", "app.layout", "app.filters", "app.directives", "app.status", "app.add", "app.edit", "app.listen" ]), 
    angular.element(document).ready(function() {
        angular.bootstrap(document, [ "app" ]);
    });
}(), function() {
    "use strict";
    angular.module("app.add", []);
}(), function() {
    "use strict";
    angular.module("blocks.access", []);
}(), function() {
    "use strict";
    angular.module("blocks.alert", []);
}(), function() {
    "use strict";
    angular.module("blocks.exception", []);
}(), function() {
    "use strict";
    angular.module("blocks.idler", []);
}(), function() {
    "use strict";
    angular.module("blocks.inputValidation", []);
}(), function() {
    "use strict";
    angular.module("blocks.jsonStorage", []);
}(), function() {
    "use strict";
    angular.module("blocks.router", [ "ui.router" ]);
}(), function() {
    "use strict";
    angular.module("blocks.tools", []);
}(), function() {
    "use strict";
    angular.module("app.core", [ "ngAnimate", "ngCookies", "ngSanitize", "blocks.alert", "blocks.access", "blocks.exception", "blocks.idler", "blocks.jsonStorage", "blocks.tools", "blocks.router", "blocks.inputValidation", "ui.router", "ngIdle", "mm.foundation", "http-auth-interceptor", "valdr", "smart-table" ]);
}(), function() {
    "use strict";
    angular.module("app.directives", []);
}(), function() {
    "use strict";
    angular.module("app.edit", []);
}(), function() {
    "use strict";
    angular.module("app.filters", []);
}(), function() {
    "use strict";
    angular.module("app.layout", []);
}(), function() {
    "use strict";
    angular.module("app.listen", []);
}(), function() {
    "use strict";
    angular.module("app.status", []);
}(), function() {
    function a(a, b, c, d) {
        function e() {
            d ? (f.HasLoaded = !0, a.log.info("going to wizard"), c.go("add.wizard")) : (b.ErrorWriterNoCallback("app.add", "22", "Error getting project"), 
            c.go("status"));
        }
        var f = this;
        f.constructor.$$moduleName ? f.constructor.$$moduleName : "app.add";
        f.HasLoaded = !1, e();
    }
    a.$inject = [ "tools", "alert", "router", "currentProject" ], angular.module("app.add").controller("Add", a);
}(), function() {
    function a(a, b, c, d, e) {
        var f = this;
        f.constructor.$$moduleName ? f.constructor.$$moduleName : "app.add";
        f.navigationItems = c.getItem("add.wizard", "navigationItems");
    }
    a.$inject = [ "tools", "configAPI", "jsonStorage", "alert", "router" ], angular.module("app.add").controller("LibraryWizard", a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        return [ {
            name: "add.wizard",
            config: {
                templateUrl: "add/add.wizard.html",
                controller: "LibraryWizard",
                controllerAs: "vm",
                title: "Library Setup"
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.add").run(a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        function a(a, b, c, d) {
            var e = d.cookies.get("currentProjectName");
            return angular.isDefined(e) ? a.GetProjectByName(e) : (c.ErrorWriterNoCallback("app.add", "99", "Project is not loaded"), 
            b.resetRoutes(), void b.go("status"));
        }
        return a.$inject = [ "jsonStorage", "router", "alert", "tools" ], [ {
            name: "add",
            config: {
                url: "/add",
                templateUrl: "add/add.html",
                controller: "Add",
                controllerAs: "vm",
                title: "Add",
                helpPage: "Add",
                settings: {
                    nav: 2,
                    content: '<i class="fa fa-plus fa-lg pad-right-2 pad-top"></i><b>Add</b>',
                    enabled: !1
                },
                resolve: {
                    currentProject: a
                }
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.add").run(a);
}(), function() {
    "use strict";
    function a(a, b, c, d) {
        function e() {
            j.accessToken = {}, j.isLoggedIn = !0;
        }
        function f() {
            j.accessToken = null, j.isLoggedIn = !1, b.go("signup");
        }
        function g(a) {
            return function() {
                return j[a];
            };
        }
        function h() {
            return j.user ? j.user.name : void 0;
        }
        function i() {
            return j.user ? "" !== j.user.displayName && null !== j.user.displayName ? j.user.displayName : j.user.name : void 0;
        }
        var j = {
            accessToken: null,
            user: null,
            isLoggedIn: !1,
            isAdmin: !1,
            login: e,
            logout: f,
            getAccessToken: g("accessToken"),
            getUser: g("user"),
            GetUserName: h,
            GetUserFullName: i,
            getAdmin: g("isAdmin")
        };
        return j;
    }
    a.$inject = [ "$http", "router", "tools", "alert" ], angular.module("blocks.access").factory("access", a);
}(), function() {
    "use strict";
    function a(a) {
        function b(a) {
            return function(b) {
                b.expanded = a;
            };
        }
        var c = this;
        c.alerts = a.alerts, c.Expand = b(!0), c.Collapse = b(!1), c.CloseAlert = a.RemoveAlert;
    }
    a.$inject = [ "alert" ], angular.module("blocks.alert").controller("Alert", a);
}(), function() {
    "use strict";
    function a(a, b, c, d) {
        function e(a, b, c, d) {
            return p.alerts.length > 0 ? o++ : o = 1, p.alerts.push({
                id: o,
                type: a,
                msg: b,
                detailedMsg: c,
                expanded: !1
            }), f(o, d, a), o;
        }
        function f(a, b, d) {
            (void 0 === b || "number" != typeof b) && (b = "alert" === d || "warning" === d ? 9e4 : 1500), 
            c(function() {
                g(a);
            }, b);
        }
        function g(a) {
            for (var b = 0; b < p.alerts.length; b++) if (p.alerts[b].id === a) {
                p.alerts.splice(b, 1);
                break;
            }
        }
        function h(a, c, d) {
            var e = a + " ";
            return a in p.codes ? c && c in p.codes[a].api ? d && d in p.codes[a].api[c].method ? (b.info(p.codes[a].api[c].method[d]), 
            e += p.codes[a].api[c].method[d]) : (b.info(p.codes[a].api[c].message), e += p.codes[a].api[c].message) : (b.info(p.codes[a].message), 
            e += p.codes[a].message) : (b.info(p.codes[500].message), e += p.codes[500].message), 
            e;
        }
        function i(c, d) {
            return function(e) {
                try {
                    b.info("Processing error message for API (" + c + ", " + d + "): " + e.data.code), 
                    e.data.uiMessage = h(e.data.code, c, d);
                } catch (f) {
                    return a.reject(e);
                }
                return a.reject(e);
            };
        }
        function j(a) {
            e("success", "Saved");
        }
        function k(a, c, f) {
            return function(g) {
                try {
                    b.info(f), b.info(g), b.info(g.data), e("alert", d.appErrorPrefix + p.modulePrefix[a] + c + " - " + f + ": " + g.data.uiMessage, g.data.errorMessage, g);
                } catch (h) {
                    e("alert", d.appErrorPrefix + c + " - Cannot contact server: Server is unreachable or is offline");
                }
            };
        }
        function l(a, b, c, f) {
            f ? f.data.uiMessage ? e("alert", d.appErrorPrefix + p.modulePrefix[a] + b + " - " + c + ": " + f.data.uiMessage, f.data.errorMessage, f) : e("alert", d.appErrorPrefix + p.modulePrefix[a] + b + " - " + c, f.data.errorMessage, f) : e("alert", d.appErrorPrefix + p.modulePrefix[a] + b + " - " + c);
        }
        function m(a, b) {
            b ? b.data.uiMessage ? e("warning", "Warning - " + a + ": " + b.data.uiMessage, b.data.errorMessage, b) : e("warning", "Warning - " + a, b.data.errorMessage, b) : e("warning", "Warning - " + a);
        }
        function n(a, c, e, f) {
            return b.info(f), b.info(a), b.info(a.data), {
                msg: d.appErrorPrefix + p.modulePrefix[c] + e + " - " + f + ": " + a.data.uiMessage,
                detailedMsg: a.data.errorMessage
            };
        }
        var o = 1, p = {
            alerts: [],
            SuccessWriter: j,
            ErrorWriter: k,
            ErrorWriterNoCallback: l,
            ErrorWriterModal: n,
            HandleError: i,
            RemoveAlert: g,
            AddAlert: e,
            WarningWriterNoCallback: m,
            codes: {
                "401": {
                    message: "You have not gained authorization to make this request",
                    api: {
                        token: {
                            message: "Incorrect username and/or password",
                            method: {}
                        },
                        user: {
                            message: "You have not gained authorization",
                            method: {
                                get: "You have not gained authorization to view the list of users",
                                post: "You have not gained authorization to create a new user or reset their password",
                                put: "You have not gained authorization to update this user"
                            }
                        },
                        raq: {
                            message: "You have not gained authorization",
                            method: {}
                        }
                    }
                },
                "400": {
                    message: "There is a problem with the request",
                    api: {
                        job: {
                            message: "Could not get specified Job",
                            method: {}
                        },
                        recipethreshold: {
                            message: "Operation could not be completed",
                            method: {}
                        },
                        recipetext: {
                            message: "Operation could not be completed",
                            method: {
                                post: "You have not supplied any identifiers"
                            }
                        },
                        risk: {
                            message: "Operation could not be completed",
                            method: {}
                        },
                        threshold: {
                            message: "Operation could not be completed",
                            method: {}
                        },
                        raq: {
                            message: "Operation could not be completed",
                            method: {
                                put: "The specified Risk Assessment is incomplete or is corrupted",
                                post: "The specified Risk Assessment is incomplete or is corrupted"
                            }
                        }
                    }
                },
                "403": {
                    message: "You do not have permission for that",
                    api: {
                        content: {
                            message: "You do not have permission to access the requested resource(s)",
                            method: {}
                        },
                        job: {
                            message: "You do not have permission to access the specified Job",
                            method: {}
                        },
                        project: {
                            message: "You do not have permission to access the specified Project",
                            method: {
                                post: "You do not have permission to create Projects",
                                put: "You do not have permission to update the Project",
                                "delete": "You do not have permission to delete the Project"
                            }
                        },
                        raq: {
                            message: "You do not have permission to access the specified Risk Assessment",
                            method: {
                                get: "You do not have permission to access the specified Risk Assessment",
                                post: "You do not have permission to add the specified Risk Assessment",
                                put: "You do not have permission to update the specified Risk Assessment",
                                "delete": "You do not have permission to delete the specified Risk Assessment"
                            }
                        },
                        recipe: {
                            message: "You do not have permission to access the specified Recipe",
                            method: {}
                        },
                        user: {
                            message: "You do not have permission to access the specified User",
                            method: {}
                        }
                    }
                },
                "404": {
                    message: "The resource could not be found",
                    api: {
                        content: {
                            message: "Resource and/or resources in request could not be found",
                            method: {}
                        },
                        job: {
                            message: "Job could not be found",
                            method: {}
                        },
                        project: {
                            message: "Project could not be found",
                            method: {}
                        },
                        raq: {
                            message: "Risk Assessment could not be found",
                            method: {}
                        },
                        recipe: {
                            message: "Recipe could not be found",
                            method: {}
                        },
                        semantic: {
                            message: "Semantic Type could not be found",
                            method: {}
                        },
                        user: {
                            message: "User could not be found",
                            method: {}
                        }
                    }
                },
                "406": {
                    message: "The requested resource cannot generate an acceptable content type",
                    api: {}
                },
                "409": {
                    message: "There is a conflict with the requested resource",
                    api: {
                        job: {
                            message: "There is a conflict with the requested Job",
                            method: {}
                        },
                        project: {
                            message: "There is a conflict with the requested Project",
                            method: {}
                        },
                        raq: {
                            message: "There is a conflict with the requested Risk Assessment",
                            method: {}
                        },
                        recipe: {
                            message: "There is a conflict with the requested Recipe",
                            method: {}
                        }
                    }
                },
                "500": {
                    message: "Internal Service Error",
                    api: {}
                }
            },
            modulePrefix: {
                "app.layout": "LO",
                "app.add": "ADD",
                "app.edit": "ED",
                "app.listen": "LS",
                "app.status": "ST"
            }
        };
        return p;
    }
    a.$inject = [ "$q", "$log", "$timeout", "config" ], angular.module("blocks.alert").factory("alert", a);
}(), function() {
    "use strict";
    function a(a) {
        return function(b, c) {
            var d = a.get("alert");
            d.AddAlert("alert", "EC.IJS - Internal Javascript error. Please do one of the following: 1) Install a newer version of your browser. 2) Re-login and attempt the process again. 3) Contact Customer Support", b.stack + ": " + b.message + ' (caused by "' + c + '")', 9e4);
        };
    }
    a.$inject = [ "$injector" ], angular.module("blocks.exception").factory("$exceptionHandler", a);
}(), function() {
    "use strict";
    function a(a, b, c, d) {
        function e() {
            a.warning && (a.warning.close(), a.warning = null), a.timedout && (a.timedout.close(), 
            a.timedout = null);
        }
        function f() {
            e(), a.warning = d.open({
                templateUrl: "warning-dialog.html",
                windowClass: "modal-danger"
            });
        }
        function g() {
            e(), c.logout();
        }
        a.started = !1, a.$on("IdleStart", f), a.$on("IdleEnd", e), a.$on("IdleTimeout", g);
    }
    a.$inject = [ "$scope", "Idle", "access", "$modal" ], angular.module("blocks.idler").controller("Idler", a);
}(), function() {
    "use strict";
    function a() {
        this.constraints = {
            EmailForm: {
                email: {
                    required: {
                        message: "This is an error message"
                    }
                }
            },
            Group: {
                groupName: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Group name must be less than 65 characters."
                    },
                    required: {
                        message: "Group name is required."
                    }
                }
            },
            User: {
                userName: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Username must be less than 65 characters."
                    },
                    required: {
                        message: "Username is required."
                    },
                    badSymbols: {
                        symbols: [ ":" ],
                        message: "Username cannot contain a colon"
                    }
                },
                displayName: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Display name must be less than 65 characters."
                    },
                    required: {
                        message: "Display name is required."
                    }
                },
                emailAddress: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Email address must be less than 65 characters."
                    },
                    required: {
                        message: "Email address is required."
                    },
                    email: {
                        message: "Must be a valid email address."
                    }
                },
                password: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Password must be less than 65 characters."
                    },
                    required: {
                        message: "Password is required."
                    }
                },
                verifyPassword: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Password must be less than 65 characters."
                    },
                    required: {
                        message: "Password is required."
                    }
                }
            },
            Library: {
                projectName: {
                    badSymbols: {
                        symbols: [ "\\", "/", ":", "*", "?", '"', "<", ">", "{", "}", "[", "]", ",", "^", "|" ],
                        message: 'Library Name cannot contain any of the following characters:["\\", "/", ":", "*", "?", """, "<", ">", "{", "}", "[", "]", ",", "^", "|"]'
                    },
                    size: {
                        min: 0,
                        max: 64,
                        message: "Library name must be less than 65 characters."
                    },
                    required: {
                        message: "Library name is required."
                    }
                }
            },
            DataDetails: {
                population: {
                    min: {
                        value: 1,
                        message: "Population must be larger than 1"
                    },
                    max: {
                        value: 75e8,
                        message: "Population is too large"
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Population must be a whole number"
                    },
                    required: {
                        message: "Custom population is required."
                    }
                },
                t2Population: {
                    min: {
                        value: 1,
                        message: "Population must be larger than 1"
                    },
                    max: {
                        value: 75e8,
                        message: "Population is too large"
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Population must be a whole number"
                    }
                },
                percentage: {
                    max: {
                        value: 100,
                        message: "Must be less than or equal to 100"
                    },
                    prevalencePercentage: {
                        message: "Must be greater than 0.000001"
                    }
                }
            },
            Network: {
                sourceNetworkSuffix: {
                    badSymbols: {
                        symbols: [ ":" ],
                        message: "Colon is not allowed here"
                    }
                },
                targetNetworkSuffix: {
                    size: {
                        min: 0,
                        message: "Folder path is required"
                    },
                    required: {
                        message: "Folder path is required."
                    },
                    badSymbols: {
                        symbols: [ ":" ],
                        message: "Colon is not allowed here"
                    }
                }
            },
            Destination: {
                targetNetworkSuffix: {
                    badSymbols: {
                        symbols: [ ":" ],
                        message: "Colon is not allowed here"
                    }
                }
            },
            Database: {
                password: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Password must be less than 65 characters."
                    },
                    required: {
                        message: "Password is required."
                    }
                }
            },
            ChangeDatabase: {
                password: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Password must be less than 65 characters."
                    },
                    required: {
                        message: "Password is required."
                    }
                },
                confirmPassword: {
                    size: {
                        min: 0,
                        max: 64,
                        message: "Password must be less than 65 characters."
                    },
                    required: {
                        message: "Password is required."
                    }
                }
            },
            DateFormat: {
                date: {
                    required: {
                        message: "Date format is required."
                    }
                }
            },
            DataGroup: {
                groupName: {
                    badSymbols: {
                        symbols: [ "\\", "/", ":", "*", "?", '"', "<", ">", "{", "}", "[", "]", ",", "^", "|" ],
                        message: 'Library Name cannot contain any of the following characters:["\\", "/", ":", "*", "?", """, "<", ">", "{", "}", "[", "]", ",", "^", "|"]'
                    },
                    size: {
                        min: 0,
                        max: 64,
                        message: "Library name must be less than 65 characters."
                    },
                    required: {
                        message: "Library name is required."
                    }
                }
            },
            Generalization: {
                length: {
                    min: {
                        value: 1,
                        message: "No negative value is allowed."
                    },
                    required: {
                        message: "Length is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                subStrStart: {
                    min: {
                        value: 1,
                        message: "Must start at first character or later"
                    },
                    required: {
                        message: "Starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                start: {
                    max: {
                        value: 1e17,
                        message: "This is too large."
                    },
                    required: {
                        message: "Starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                interval: {
                    min: {
                        value: 1,
                        message: "Must be greater than 0"
                    },
                    required: {
                        message: "Interval is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                startDouble: {
                    max: {
                        value: 1e17,
                        message: "This is too large."
                    },
                    required: {
                        message: "Starting value is required."
                    }
                },
                intervalDouble: {
                    min: {
                        value: 1e-18,
                        message: "Must be greater than 0"
                    },
                    required: {
                        message: "Interval is required."
                    }
                },
                startingYear: {
                    minLength: {
                        number: 4,
                        message: "The year must be four digits."
                    },
                    maxLength: {
                        number: 4,
                        message: "The year must be four digits."
                    },
                    required: {
                        message: "Starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    },
                    onlyNumbers: {
                        message: "Must be a whole number"
                    }
                },
                topCodeValue: {
                    minLength: {
                        number: 4,
                        message: "The year must be four digits."
                    },
                    maxLength: {
                        number: 4,
                        message: "The year must be four digits."
                    },
                    required: {
                        message: "Starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    },
                    onlyNumbers: {
                        message: "Must be a whole number"
                    }
                }
            },
            DateShifting: {
                shiftStart: {
                    min: {
                        value: -9999999999,
                        message: "Shifting starting value must be larger"
                    },
                    max: {
                        value: 9999999999,
                        message: "Shifting starting value must be smaller"
                    },
                    required: {
                        message: "Shifting starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                shiftEnd: {
                    min: {
                        value: -9999999999,
                        message: "Shifting ending value must be larger"
                    },
                    max: {
                        value: 9999999999,
                        message: "Shifting ending value must be smaller"
                    },
                    required: {
                        message: "Shifting ending value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                jitter: {
                    min: {
                        value: 1,
                        message: "Jitter Dates value must be greater than 0 to jitter date interval"
                    },
                    max: {
                        value: 9999999999,
                        message: "Jitter starting value must be smaller"
                    },
                    required: {
                        message: "Jitter starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                timeShiftStart: {
                    min: {
                        value: -9999999999,
                        message: "Shifting-time starting value must be larger"
                    },
                    max: {
                        value: 9999999999,
                        message: "Shifting-time starting value must be smaller"
                    },
                    required: {
                        message: "Shifting-time starting value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                },
                timeShiftEnd: {
                    min: {
                        value: -9999999999,
                        message: "Shifting-time ending value must be larger"
                    },
                    max: {
                        value: 9999999999,
                        message: "Shifting-time ending value must be smaller"
                    },
                    required: {
                        message: "Shifting-time ending value is required."
                    },
                    badSymbols: {
                        symbols: [ "." ],
                        message: "Must be a whole number"
                    }
                }
            }
        }, this.$get = function() {
            return {
                constraints: this.constraints
            };
        };
    }
    function b(a) {
        return {
            name: "badSymbols",
            validate: function(b, c) {
                return b ? !a.ContainsAnyOf(b.toString(), c.symbols) : !0;
            }
        };
    }
    function c() {
        return {
            name: "onlyNumbers",
            validate: function(a) {
                return a ? !isNaN(a) : !0;
            }
        };
    }
    function d() {
        return {
            name: "prevalencePercentage",
            validate: function(a, b) {
                return a ? a >= 1e-6 && 100 >= a : !1;
            }
        };
    }
    b.$inject = [ "tools" ], angular.module("blocks.inputValidation").provider("validationConfig", a), 
    angular.module("blocks.inputValidation").factory("badSymbols", b).factory("onlyNumbers", c).factory("prevalencePercentage", d);
}(), function() {
    "use strict";
    function a(a, b, c, d) {
        function e(a, b) {
            return angular.copy(k[a][b]);
        }
        function f(a) {
            l.push(a);
        }
        function g(a) {
            l = b.RemoveElement(l, a);
        }
        function h() {
            return l;
        }
        function i(a) {
            var b = l.filter(function(b) {
                return b.name.toLowerCase() === a.toLowerCase();
            });
            return b ? b[0] : void 0;
        }
        var j = {
            getItem: e,
            CreateProject: f,
            DeleteProject: g,
            GetProjects: h,
            GetProjectByName: i
        }, k = {
            "layout.menu": {
                GeneralNav: [ {
                    Title: "Profile",
                    MenuLink: function() {
                        a.go("profile", {}, {
                            reload: !0
                        });
                    },
                    Visibility: !0,
                    Icon: "fa fa-user"
                }, {
                    Visibility: !0,
                    Title: "divider"
                }, {
                    Title: "About",
                    MenuLink: function() {
                        b.modal.open({
                            templateUrl: "layout/about/about.html",
                            controller: "About",
                            controllerAs: "vm"
                        });
                    },
                    Visibility: !0,
                    Icon: "fa fa-font"
                }, {
                    Title: "Logout",
                    MenuLink: c.logout,
                    Visibility: !0,
                    Icon: "fa fa-sign-out"
                } ]
            },
            "add.wizard": {
                navigationItems: [ {
                    Title: "Upload Local",
                    id: "upload",
                    MenuLink: function() {
                        d.go("edit");
                    },
                    Image: "content/images/upload_icon.png",
                    Color: "success",
                    Visible: !0
                }, {
                    Title: "Folder Files",
                    id: "network",
                    MenuLink: function() {
                        d.go("edit");
                    },
                    Image: "content/images/network_folder.png",
                    Color: "info",
                    Visible: !0
                } ]
            }
        }, l = [ {
            id: "1",
            name: "Foobar Files",
            files: [ {
                name: "Calm Snow",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "191"
            }, {
                name: "Break",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "227"
            }, {
                name: "White Lies",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "212"
            }, {
                name: "Everyone's Safe",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "246"
            }, {
                name: "Running With Scissors",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "262"
            }, {
                name: "Mobbin' Out",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "295"
            }, {
                name: "Walking on Gravetones",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "230"
            }, {
                name: "Light in the Cave",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "231"
            }, {
                name: "All In",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "262"
            }, {
                name: "Two Hearted",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "264"
            }, {
                name: "Portals",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "323"
            }, {
                name: "Yellow King",
                artist: "I See Stars",
                album: "Treehouse",
                genre: "Electronicore",
                year: "2016",
                duration: "289"
            } ],
            created: "2016-06-28T02:35:53.603Z"
        } ];
        return j;
    }
    a.$inject = [ "$state", "tools", "access", "router" ], angular.module("blocks.jsonStorage").factory("jsonStorage", a);
}(), function() {
    "use strict";
    function a() {
        this.config = {}, this.$get = function() {
            return {
                config: this.config
            };
        };
    }
    function b(a, b, c, d) {
        function e(a) {
            a.forEach(function(a) {
                o.state(a.name, a.config);
            }), p.otherwise("/signup");
        }
        function f() {
            m();
        }
        function g() {
            for (var a in b.get()) if (b.get().hasOwnProperty(a)) {
                var c = b.get()[a], d = !!c.title;
                d && n.push(c);
            }
            return n;
        }
        function h(a, c) {
            var e = d.ExtractElement(n, "name", a.split(".")[0]);
            if (e && angular.isDefined(e.settings) && angular.isDefined(e.settings.enabled)) {
                var f = n.filter(function(a) {
                    return a.settings;
                }).sort(function(a, b) {
                    return a.settings.nav - b.settings.nav;
                }).filter(function(a) {
                    return a.settings.nav <= e.settings.nav;
                }).map(function(a) {
                    return a.name;
                });
                c && (f = [ a ]), i(f, !0);
            }
            d.log.info("state go"), b.go(a);
        }
        function i(a, b) {
            a.forEach(function(a) {
                var c = d.ExtractElement(n, "name", a.split(".")[0]);
                c && (c.settings.enabled = b);
            });
        }
        function j(a) {
            var b = d.ExtractElement(n, "name", a.split(".")[0]);
            return b ? b.settings.enabled : !1;
        }
        function k() {
            b.get().forEach(function(a) {
                angular.isDefined(a.settings) && (a.settings.enabled = !1);
            });
        }
        function l() {
            var a = g().filter(function(a) {
                return a.settings;
            }).sort(function(a, b) {
                return a.settings.nav - b.settings.nav;
            }).find(function(a) {
                return a.settings.nav > 2;
            });
            h(a.name);
        }
        function m() {
            a.$on("$stateChangeSuccess", function(a, b, c) {
                document.querySelector("title").innerHTML = "MLibrary - " + (b.title || "");
            });
        }
        var n = [], o = c.config.$stateProvider, p = c.config.$urlRouterProvider, q = {
            configureRoutes: e,
            getRoutes: g,
            go: h,
            setRouteStates: i,
            getRouteState: j,
            resetRoutes: k,
            toFirstStep: l
        };
        return f(), q;
    }
    b.$inject = [ "$rootScope", "$state", "routerConfig", "tools" ], angular.module("blocks.router").provider("routerConfig", a).factory("router", b);
}(), function() {
    "use strict";
    function a(a, b, c, d, e, f, g, h, i) {
        function j(a, b) {
            return b.filter(function(b) {
                return b === a;
            }).length > 0;
        }
        function k(a, b, c) {
            for (var d = 0; d < a.length; d++) {
                var e = a[d];
                if (e[b] === c) return e;
            }
            return null;
        }
        function l(a, b) {
            return b >= 0 && a.splice(b, 1), a;
        }
        function m(a, b, c) {
            return a.slice(b, b + c);
        }
        function n(a, b, c) {
            return m(a, b * (c - 1), b);
        }
        function o(a) {
            return angular.isDefined(a) && null !== a && "" !== a;
        }
        function p(a, b) {
            return b.some(function(b) {
                return a.indexOf(b) > -1;
            });
        }
        function q(a) {
            return a.charAt(0).toUpperCase() + a.slice(1);
        }
        function r(a) {
            for (var b in a) if (a.hasOwnProperty(b)) return !1;
            return !0;
        }
        var s = {
            timeout: b,
            log: a,
            cookies: f,
            q: i,
            modal: g,
            filter: h,
            interval: d,
            location: e,
            window: c,
            InArray: j,
            ExtractElement: k,
            RemoveElement: l,
            Subset: m,
            GetPage: n,
            Exists: o,
            ContainsAnyOf: p,
            CapitalizeString: q,
            IsEmptyObject: r
        };
        return s;
    }
    a.$inject = [ "$log", "$timeout", "$window", "$interval", "$location", "$cookies", "$modal", "$filter", "$q" ], 
    angular.module("blocks.tools").factory("tools", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(c) {
            return a({
                method: "POST",
                url: e,
                headers: {
                    "Content-Type": "application/vnd.privacyanalytics.datamodel+json"
                },
                data: angular.toJson(c)
            }).then(function(a) {
                return a.data;
            }, b.HandleError("post"));
        }
        var d = {
            ClassifyModel: c
        }, e = "/api/1.0/classify/";
        return d;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("classifyAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(a) {
            return a.data;
        }
        function d() {
            return a({
                method: "GET",
                url: i + "projects",
                headers: {
                    Accept: "application/json"
                }
            }).then(c, b.HandleError("config", "get"));
        }
        function e(d) {
            return a({
                method: "GET",
                url: i + "jdbc/" + (d ? d + "/properties" : "")
            }).then(c, b.HandleError("jdbc", "get"));
        }
        function f(d, e, f) {
            return a({
                method: "POST",
                url: i + "jdbc/" + d + "/catalogs" + (f ? "/" + f : ""),
                headers: {
                    "Content-Type": "application/json"
                },
                data: JSON.stringify(e)
            }).then(c, b.HandleError("jdbc", "post"));
        }
        function g(d, e) {
            return function() {
                return a({
                    method: "GET",
                    url: i + d + "/" + e + "formats",
                    headers: {
                        "Content-Type": "application/json"
                    }
                }).then(c, b.HandleError(d, "get"));
            };
        }
        var h = {
            GetRootPaths: d,
            GetJDBCDrivers: e,
            GetDriverProperties: e,
            GetCatalogs: f,
            GetCatalogModel: f,
            GetLexiconDateFormats: g("text", "date"),
            GetRiskDateFormats: g("riskmeasurement", "date"),
            GetRiskTimeFormats: g("riskmeasurement", "time")
        }, i = "/api/1.0/config/";
        return h;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("configAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(c, d) {
            var f = {
                method: "GET",
                url: e + c + (d ? "/" + d : "")
            };
            return d && (f.headers = {
                Accept: "application/pdf"
            }, f.responseType = "arraybuffer"), a(f).then(function(a) {
                return a.data;
            }, b.HandleError("raq", "get"));
        }
        var d = {
            GetForm: c,
            GetFormAtLevel: c
        }, e = "/api/1.0/defaultriskassessments/";
        return d;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("defaultriskassessmentsAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(a) {
            return a.data;
        }
        function d(d) {
            return a.get(i + (d ? d : "")).then(c, b.HandleError("group", "get"));
        }
        function e(d) {
            return a.post(i, d, {
                responseType: "json"
            }).then(c, b.HandleError("group", "post"));
        }
        function f(d) {
            return a.put(i + d.id, d, {
                responseType: "json"
            }).then(c, b.HandleError("group", "put"));
        }
        function g(d) {
            return a["delete"](i + d).then(c, b.HandleError("group", "delete"));
        }
        var h = {
            GetGroup: d,
            GetGroups: d,
            CreateGroup: e,
            EditGroup: f,
            DeleteGroup: g
        }, i = "/api/1.0/groups/";
        return h;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("groupsAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(c) {
            return a({
                method: "POST",
                url: e,
                data: c
            }).then(function(a) {
                return a;
            }, b.HandleError("job", "get"));
        }
        var d = {
            SubmitEmail: c
        }, e = "http://shopify-fed-test.herokuapp.com/emails.json";
        return d;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("emailAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c, d) {
        function e(d, e, f, g, h, i) {
            var j = {
                method: d,
                url: y + f
            };
            return h && (j.headers = h), i && (j.data = i), a(j).then(function(a) {
                return g && (b.info(g), b.info(a.data)), a.data;
            }, c.HandleError(e, d.toLowerCase()));
        }
        function f(a) {
            return {
                "Content-Type": io.CorrectMIMEType(a)
            };
        }
        function g(a) {
            return e("GET", "project", a ? window.encodeURIComponent(a) : "");
        }
        function h(a) {
            return e("POST", "project", "", "", A, angular.toJson(a));
        }
        function i(a) {
            return e("PUT", "project", window.encodeURIComponent(a.name), "", A, angular.toJson(a));
        }
        function j(a) {
            return e("DELETE", "project", window.encodeURIComponent(a), "", A);
        }
        function k(a, b) {
            return e("POST", "project", "?copyFrom=" + window.encodeURIComponent(a) + "&copyTo=" + window.encodeURIComponent(b), "", A);
        }
        function l(a) {
            return function(b) {
                return e("GET", "project", window.encodeURIComponent(b) + "?introspect=" + a, "success introspect");
            };
        }
        function m(a) {
            return e("GET", "content", window.encodeURIComponent(a) + "/source");
        }
        function n(a, b, c) {
            var g = d.InArray(b.type, z) ? "" : b.name;
            return e(c ? "PUT" : "POST", "content", window.encodeURIComponent(a) + "/source/" + window.encodeURIComponent(g), "", f(b), b);
        }
        function o(a, b) {
            return e("DELETE", "content", window.encodeURIComponent(a) + "/source" + (b ? "/" + window.encodeURIComponent(b) : ""));
        }
        function p(a) {
            return function(b, c) {
                return e("GET", "recipe" + a, window.encodeURIComponent(b) + "/recipes/" + window.encodeURIComponent(angular.isDefined(c) ? c : b), "", B[a]);
            };
        }
        function q(a) {
            return function(b, c) {
                return e("POST", "recipe" + a, window.encodeURIComponent(b) + "/recipes", "", B[a], angular.toJson(c));
            };
        }
        function r(a) {
            return function(b, c) {
                return e("PUT", "recipe" + a, window.encodeURIComponent(b) + "/recipes/" + window.encodeURIComponent(c.name), "updated recipe", B[a], angular.toJson(c));
            };
        }
        function s(a) {
            return function(b, c) {
                return e("DELETE", "recipe" + a, window.encodeURIComponent(b) + "/recipes/" + window.encodeURIComponent(c), "delete recipe", B[a]);
            };
        }
        function t(a) {
            return 10 > a && (a = "0" + a), a;
        }
        function u(b, e) {
            return function(f, g) {
                var h = new Date(), i = h.getDate() + "/" + (h.getMonth() + 1) + "/" + h.getFullYear() + " @ " + t(h.getHours()) + ":" + t(h.getMinutes()) + ":" + t(h.getSeconds());
                return a({
                    method: "POST",
                    url: y + window.encodeURIComponent(f) + "?operation=" + b + "&jobName=" + window.encodeURIComponent(f + " - " + ("riskMeasurement" === e ? d.CapitalizeString(g.measurementType) : "transform") + " - " + i) + "&async=1",
                    headers: {
                        "Content-Type": void 0
                    },
                    transformRequest: function(a) {
                        var b = new FormData();
                        return b.append("recipe", new Blob([ angular.toJson(g) ], B[e])), b;
                    },
                    data: {
                        model: g
                    }
                }).then(function(a) {
                    return a.data;
                }, c.HandleError("risk", "post"));
            };
        }
        function v(a) {
            return e("POST", "threshold", window.encodeURIComponent(a) + "?recipe=" + window.encodeURIComponent(a) + "&operation=computeThreshold", "", A);
        }
        function w(a) {
            return function(b, c) {
                var f = new Date(), g = f.getDate() + "/" + (f.getMonth() + 1) + "/" + f.getFullYear() + " @ " + t(f.getHours()) + ":" + t(f.getMinutes()) + ":" + t(f.getSeconds());
                return e("POST", "project", window.encodeURIComponent(b) + "?recipe=" + window.encodeURIComponent(angular.isDefined(c) ? c : b) + "&operation=" + a + "&jobName=" + window.encodeURIComponent(b + " - " + d.CapitalizeString(a) + " - " + g) + "&async=1", "", A);
            };
        }
        var x = {
            GetProjects: g,
            GetProject: g,
            CreateProject: h,
            UpdateProject: i,
            DeleteProject: j,
            CloneProject: k,
            ClassifyModel: l("true"),
            RunIntrospect: l("basic"),
            GetFiles: m,
            UploadFile: n,
            DeleteFile: o,
            GetRMRecipe: p("threshold"),
            GetMeasurementRecipe: p("measurement"),
            GetLexiconRecipe: p("lexicon"),
            GetEclipseRecipe: p("transformation"),
            CreateMeasurementRecipe: q("measurement"),
            CreateRMRecipe: q("threshold"),
            CreateLexiconRecipe: q("lexicon"),
            CreateEclipseRecipe: q("transformation"),
            UpdateRMRecipe: r("threshold"),
            UpdateMeasurementRecipe: r("measurement"),
            UpdateLexiconRecipe: r("lexicon"),
            UpdateEclipseRecipe: r("transformation"),
            DeleteLexiconRecipe: s("lexicon"),
            MeasureRiskAsync: u("measureRisk", "riskMeasurement"),
            ComputeThreshold: v,
            RunMaskAsync: w("mask"),
            RunDeid: u("transform", "deid")
        }, y = "/api/1.0/projects/", z = [ "application/zip", "application/x-zip-compressed" ], A = {
            "Content-Type": "application/vnd.privacyanalytics.project+json",
            Accept: "application/vnd.privacyanalytics.project+json"
        }, B = {
            threshold: {
                "Content-Type": "application/vnd.privacyanalytics.threshold.thresholdrecipe+json"
            },
            lexicon: {
                "Content-Type": "application/vnd.privacyanalytics.recipe.text+json",
                Accept: "application/vnd.privacyanalytics.recipe.text+json"
            },
            riskMeasurement: {
                type: "application/vnd.privacyanalytics.it-riskmeasurementrecipe+json"
            },
            deid: {
                type: "application/vnd.privacyanalytics.transformationrecipe+json"
            },
            transformation: {
                "Content-Type": "application/vnd.privacyanalytics.transformationrecipe+json"
            },
            measurement: {
                "Content-Type": "application/vnd.privacyanalytics.it-riskmeasurementrecipe+json"
            }
        };
        return x;
    }
    a.$inject = [ "$http", "$log", "alert", "tools" ], angular.module("app.core").factory("projectsAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c) {
        function d(d, e, g, h) {
            var i = "application/pdf" === d ? h ? "summaryPredeid" : "summaryPostdeid" : h ? "comprehensivePredeid" : "comprehensivePostdeid", j = "application/zip" === d ? "true" : "false";
            return a({
                method: "GET",
                headers: {
                    Accept: d
                },
                responseType: "arraybuffer",
                url: f + i + "/job/" + window.encodeURIComponent(e) + "?threshold=" + window.encodeURIComponent(g) + "&includeRaqs=" + j
            }).then(function(a) {
                return b.info(a.headers("Content-Type")), a.contentType = a.headers("Content-Type"), 
                a;
            }, c.HandleError("report", "get"));
        }
        var e = {
            GetReport: d
        }, f = "/api/1.0/reports/";
        return e;
    }
    a.$inject = [ "$http", "$log", "alert" ], angular.module("app.core").factory("reportsAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c) {
        function d(b) {
            return a({
                method: "GET",
                url: k + (b ? window.encodeURIComponent(b) : "")
            }).then(function(a) {
                return a.data;
            }, c.HandleError("raq", "get"));
        }
        function e(b) {
            return a({
                method: "POST",
                url: k,
                data: angular.toJson(b)
            }).then(function() {}, c.HandleError("raq", "post"));
        }
        function f(b, d) {
            return a({
                method: "PUT",
                url: k + window.encodeURIComponent(b),
                data: angular.toJson(d)
            }).then(function() {}, c.HandleError("raq", "put"));
        }
        function g(b) {
            return a({
                method: "DELETE",
                url: k + window.encodeURIComponent(b)
            }).then(function() {}, c.HandleError("raq", "delete"));
        }
        function h(d, e, f, g) {
            return a({
                method: g ? "PUT" : "POST",
                url: k + window.encodeURIComponent(d) + "/" + f,
                data: e,
                headers: {
                    "Content-Type": "application/pdf"
                }
            }).then(function() {
                return b.defer().resolve();
            }, c.HandleError("raq", g ? "put" : "post"));
        }
        function i(b, d) {
            return a({
                method: "DELETE",
                url: k + window.encodeURIComponent(b) + "/" + d
            }).then(function(a) {
                return a.data;
            }, c.HandleError("raq", "delete"));
        }
        var j = {
            GetRiskAssessment: d,
            GetRiskAssessments: d,
            CreateRiskAssessment: e,
            AddForm: h,
            RemoveForm: i,
            DeleteRiskAssessment: g,
            UpdateRiskAssessment: f
        }, k = "/api/1.0/riskassessments/";
        return j;
    }
    a.$inject = [ "$http", "$q", "alert" ], angular.module("app.core").factory("riskassessmentsAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(c) {
            return function() {
                return a({
                    method: "GET",
                    url: e + c
                }).then(function(a) {
                    return a.data;
                }, b.HandleError("semantic", "get"));
            };
        }
        var d = {
            GetNames: c("names"),
            GetTypes: c("types"),
            GetNamesWithCollection: c("namesWithCollection")
        }, e = "/api/1.0/semantic/";
        return d;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("semanticAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c) {
        function d(a, b) {
            return f("POST", "threshold", window.encodeURIComponent(a) + "?jobId=" + window.encodeURIComponent(b) + "&recipeName=" + window.encodeURIComponent(a) + "&operation=computeThreshold", "");
        }
        function e(a) {
            return f("POST", "threshold", window.encodeURIComponent(a) + "?recipeName=" + window.encodeURIComponent(a) + "&operation=computeThreshold", "");
        }
        function f(d, e, f, g, i, j) {
            var k = {
                method: d,
                url: h + f
            };
            return i && (k.headers = i), j && (k.data = j), a(k).then(function(a) {
                return g && (b.info(g), b.info(a.data)), a.data;
            }, c.HandleError(e, d.toLowerCase()));
        }
        var g = {
            ComputeJobThreshold: d,
            ComputeProjectThreshold: e
        }, h = "/api/1.0/thresholds/";
        return g;
    }
    a.$inject = [ "$http", "$log", "alert" ], angular.module("app.core").factory("thresholdsAPI", a);
}(), function() {
    "use strict";
    function a(a, b) {
        function c(c) {
            return a({
                method: "GET",
                url: e,
                ignoreAuthModule: !0,
                headers: {
                    Authorization: c
                }
            }).then(function(a) {
                return a.data;
            }, b.HandleError("token", "get"));
        }
        var d = {
            GetToken: c
        }, e = "/api/1.0/tokens";
        return d;
    }
    a.$inject = [ "$http", "alert" ], angular.module("app.core").factory("tokensAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c) {
        function d(b) {
            return a({
                method: "GET",
                url: l + (b ? b : "")
            }).then(function(a) {
                return a.data;
            }, c.HandleError("user", "get"));
        }
        function e(d) {
            return a.post(l, d, {
                responseType: "json"
            }).then(function(a) {
                return b.log.info(a), a.data;
            }, c.HandleError("user", "post"));
        }
        function f(b) {
            return a.put(l + b.id, b, {
                responseType: "json"
            }).then(function(a) {
                return a.data;
            }, c.HandleError("user", "put"));
        }
        function g(b) {
            return a["delete"](l + b).then(function(a) {
                return a.data;
            }, c.HandleError("user", "delete"));
        }
        function h(b, d) {
            return a({
                method: "POST",
                url: l + b + "/password",
                data: JSON.stringify(d)
            }).then(function(a) {
                return a.data;
            }, c.HandleError("user", "put"));
        }
        function i(b) {
            return a({
                method: "GET",
                url: l + b + "/reset"
            }).then(function(a) {
                return a.data;
            }, c.HandleError("user", "get"));
        }
        function j(b, d, e) {
            return a({
                method: "POST",
                url: l + b + "/password",
                ignoreAuthModule: !0,
                headers: {
                    Authorization: "Bearer " + d
                },
                data: JSON.stringify(e)
            }).then(function(a, b) {}, c.HandleError("user", "put"));
        }
        var k = {
            GetUser: d,
            GetUsers: d,
            AddUser: e,
            EditUser: f,
            DeleteUser: g,
            UpdatePassword: h,
            RequestResetPassword: i,
            ResetPassword: j
        }, l = "/api/1.0/users/";
        return k;
    }
    a.$inject = [ "$http", "tools", "alert" ], angular.module("app.core").factory("usersAPI", a);
}(), function() {
    "use strict";
    function a(a, b, c, d, e, f, g, h, i, j, k) {
        b.debugInfoEnabled(!0), c.defaults.headers.common["Cache-Control"] = "no-cache, no-store, must-revalidate", 
        c.defaults.headers.common.Pragma = "no-cache", c.defaults.headers.common.Expires = "0", 
        i.config.$stateProvider = d, i.config.$urlRouterProvider = e, i.config.docTitle = "MLibrary: ", 
        f.idle(600), f.timeout(30), g.interval(2), h.classNameFilter(/animate-repeat/), 
        j.addValidator("badSymbols"), j.addValidator("prevalencePercentage"), j.addValidator("onlyNumbers"), 
        j.addConstraints(k.constraints);
    }
    function b(a, b, c) {
        a.$on("$locationChangeSuccess", function() {
            b.isLoggedIn || "login" === c.current.name || "signup" === c.current.name || c.go("signup");
        });
    }
    b.$inject = [ "$rootScope", "access", "$state" ], a.$inject = [ "$provide", "$compileProvider", "$httpProvider", "$stateProvider", "$urlRouterProvider", "IdleProvider", "KeepaliveProvider", "$animateProvider", "routerConfigProvider", "valdrProvider", "validationConfigProvider" ];
    var c = angular.module("app.core"), d = {
        appId: "mlibrary",
        appErrorPrefix: "MLIB.",
        appTitle: "MLibrary",
        version: "2.5",
        supportedFileFormats: ".csv, text/csv, application/zip, application/vnd.ms-excel, application/x-zip-compressed"
    };
    c.value("config", d), c.value("maxFileSize", 256e6), c.config(a), c.run(b);
}(), function() {
    "use strict";
    angular.module("app.directives").directive("giveFocus", [ "$timeout", function(a) {
        return {
            restrict: "AC",
            link: function(b, c) {
                a(function() {
                    c[0].focus();
                }, 50);
            }
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paFooter", function() {
        return {
            restrict: "E",
            templateUrl: "directives/footer.html"
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paHeader", function() {
        return {
            restrict: "E",
            templateUrl: "directives/header.html",
            transclude: !0,
            scope: {
                home: "&logoClick"
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paInputSeparator", [ "$filter", function(a) {
        return {
            require: "ngModel",
            restrict: "A",
            link: function(b, c, d, e) {
                e.$formatters.unshift(function() {
                    return a("number")(e.$modelValue);
                }), e.$parsers.unshift(function(b) {
                    var d = b.replace(/[\,\.]/g, ""), e = a("number")(d);
                    return c.val(e), d;
                });
            }
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paModalError", function() {
        return {
            restrict: "E",
            templateUrl: "directives/modal-error.html",
            scope: {
                alertobject: "="
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("percentage", function() {
        return {
            require: "ngModel",
            restrict: "A",
            link: function(a, b, c, d) {
                d.$validators.percentage = function(a) {
                    return d.$isEmpty(a) || a >= 0 && 100 >= a;
                };
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paProgressbar", function() {
        return {
            restrict: "E",
            templateUrl: "directives/progressbar.html",
            transclude: !0,
            scope: {
                barValue: "=",
                displayValue: "="
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paSpinner", function() {
        return {
            restrict: "E",
            templateUrl: "directives/spinner.html",
            scope: {
                spinText: "@"
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paSplashImage", [ "config", function(a) {
        return {
            restrict: "E",
            templateUrl: "directives/splash-image.html",
            link: function(a, b, c, d) {
                a.imgSource = "content/images/splash.png";
            }
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.directives").directive("paSubnav", [ "$state", "tools", function(a, b) {
        return {
            restrict: "E",
            templateUrl: "directives/subnav.html",
            transclude: !0,
            scope: {
                navItems: "="
            },
            link: function(b, c, d, e) {
                b.IsCurrent = function(b) {
                    var c = -1 !== a.current.name.indexOf(b.Link);
                    return c && (b.Enabled = !0), c;
                };
            }
        };
    } ]);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        function a(a, b, c, d) {
            var e = d.cookies.get("currentProjectName");
            return angular.isDefined(e) ? a.GetProjectByName(e) : (c.ErrorWriterNoCallback("app.add", "99", "Project is not loaded"), 
            b.resetRoutes(), void b.go("status"));
        }
        return a.$inject = [ "jsonStorage", "router", "alert", "tools" ], [ {
            name: "edit",
            config: {
                url: "/edit",
                templateUrl: "edit/edit.html",
                controller: "Edit",
                controllerAs: "vm",
                title: "Edit",
                helpPage: "Edit",
                settings: {
                    nav: 3,
                    content: '<i class="fa fa-pencil fa-lg pad-right-2 pad-top"></i><b>Edit</b>',
                    enabled: !1
                },
                resolve: {
                    currentProject: a
                }
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.edit").run(a);
}(), function() {
    function a(a, b, c, d) {
        function e() {
            g.HasLoaded = !0;
        }
        function f() {
            if (b.log.info("i am called"), angular.isDefined(g.email)) {
                var c = {
                    email: g.email
                };
                a.SubmitEmail(c).then(function(a) {
                    g.Message = "Your email has been successfully submitted!";
                }, function(a) {
                    b.log.info(a), g.Message = a.data.errors.email[0];
                });
            } else g.Message = "Email is empty";
        }
        var g = this;
        g.constructor.$$moduleName ? g.constructor.$$moduleName : "app.edit";
        g.HasLoaded = !1, g.SubmitEmail = f, e();
    }
    a.$inject = [ "emailAPI", "tools", "alert", "currentProject" ], angular.module("app.edit").controller("Edit", a);
}(), function() {
    "use strict";
    angular.module("app.filters").filter("prettyClassification", function() {
        return function(a) {
            switch (a && (a = a.toUpperCase()), a) {
              case "TEXT":
                return "TEXT";

              case "DI":
                return "Direct Identifier";

              case "QI":
                return "Quasi-Identifier";

              case "PQI":
                return "Public Quasi-Identifier";

              case "AQI":
                return "Acquaintance Quasi-Identifier";

              case "NI":
                return "Non-Identifier";

              case "":
                return "Please Classify";

              case null:
                return "Please Classify";

              case void 0:
                return "Please Classify";

              default:
                return "Please Classify";
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.filters").filter("prettyDataType", function() {
        return function(a) {
            switch (a && (a = a.toUpperCase()), a) {
              case "STRING":
                return "String";

              case "TIMESTAMP":
                return "Date";

              case "DATE":
                return "Date";

              case "LONG":
                return "Long";

              case "DOUBLE":
                return "Double";

              case "UNSUPPORTED":
                return "Unsupported";

              default:
                return "Unsupported";
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.filters").filter("prettyGroupType", function() {
        return function(a) {
            switch (a && (a = a.toUpperCase()), a) {
              case "DATES":
                return "Date Shifting";

              case "DATES_QI":
                return "Dates QI";

              case "LOCATIONS_QI":
                return "Locations";

              case "MEDICAL_QI":
                return "Medical";

              default:
                return "OTHER";
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.filters").filter("prettyMaskingStrategy", function() {
        return function(a) {
            switch (a && (a = a.toUpperCase()), a) {
              case "MASK":
                return "Mask";

              case "MASKRANGE":
                return "Mask Range";

              case "MASKENTITY":
                return "Mask Entity";

              case "GENERALIZEDATE":
                return "Generalize Date";

              case "GENERALIZEDOUBLE":
                return "Generalize Double";

              case "GENERALIZELONG":
                return "Generalize Long";

              case "GENERALIZESTRING":
                return "Substring";

              case "MASKCPT":
                return "Mask CPT";

              case "MASKCOMBO":
                return "Mask Combo";

              case "MASKCONSTANT":
                return "Mask Constant";

              case "MASKID":
                return "Mask ID";

              case "MASKMULTIRANGE":
                return "Mask Multirange";

              case "MASKNULL":
                return "Masking Null";

              case "MASKSEMANTIC":
                return "Mask as";

              case "MASKSELECT":
                return "Mask Select";

              case "MASKSTREET":
                return "Mask Street";

              case "MASKVARYINGID":
                return "Masking Varying ID";

              case "REDACT":
                return "Redact";

              case "SHIFT":
                return "Shifting";

              case "NOP":
                return "No Generalization";

              case "":
                return "Please Specify";

              case null:
                return "Please Specify";

              case void 0:
                return "Please Specify";

              default:
                return "Please Specify";
            }
        };
    });
}(), function() {
    "use strict";
    angular.module("app.filters").filter("prettyDestinationTarget", function() {
        return function(a) {
            switch (a && (a = a.toUpperCase()), a) {
              case "DROPCREATE":
                return "Drop and Create";

              case "CREATE":
                return "Create";

              case "USEEXISTING":
                return "Use Existing";

              default:
                return "Drop and Create";
            }
        };
    });
}(), function() {
    function a(a, b) {
        var c = this;
        c.appName = b.appTitle, c.appVersion = b.version, c.cancel = function() {
            a.dismiss("cancel");
        };
    }
    a.$inject = [ "$modalInstance", "config" ], angular.module("app.layout").controller("About", a);
}(), function() {
    function a(a, b, c, d) {
        var e = this;
        e.TheObject = b ? b : "", e.TheAction = c ? c : "", e.TheExplanation = d ? d : "", 
        e.Yes = function() {
            a.close(!0);
        }, e.No = function() {
            a.close(!1);
        };
    }
    a.$inject = [ "$modalInstance", "object", "action", "explanation" ], angular.module("app.layout").controller("ActionModal", a);
}(), function() {
    function a(a, b, c, d) {
        function e() {
            c.GetLexiconDateFormats().then(function(a) {
                d && d.length > 0 ? (d.forEach(function(a) {
                    h.models.lists.A.list.push({
                        label: a
                    });
                }), a.forEach(function(a) {
                    -1 === d.indexOf(a.format) && h.models.lists.B.list.push({
                        label: a.format
                    });
                })) : a.forEach(function(a) {
                    (a.isDefault ? h.models.lists.A : h.models.lists.B).list.push({
                        label: a.format
                    });
                });
            }, function(a) {
                h.error = b.ErrorWriterModal(a, i, "11", "Error editing the group");
            });
        }
        function f() {
            a.close(h.models.lists.A.list.map(function(a) {
                return a.label;
            }));
        }
        function g() {
            a.dismiss("cancel");
        }
        var h = this, i = h.constructor.$$moduleName ? h.constructor.$$moduleName : "app.layout";
        h.SetAdvanced = f, h.Cancel = g, e(), h.models = {
            selected: null,
            lists: {
                A: {
                    title: "Date Formats to be Detected (Ordered)",
                    list: []
                },
                B: {
                    title: "Unused Date Formats",
                    list: []
                }
            }
        };
    }
    a.$inject = [ "$modalInstance", "alert", "configAPI", "preferredDateFormats" ], 
    angular.module("app.layout").controller("DatesModal", a);
}(), function() {
    function a(a, b, c, d, e) {
        function f() {
            var f = $.base64.encode(h.user.name + ":" + h.user.password), g = "Basic " + f;
            b.GetToken(g).then(function(b) {
                h.user = b.user, d.Login(b), c.loginConfirmed("success", function(a) {
                    return a.headers.Authorization = "Bearer " + b.token, a;
                }), a.close();
            }, function(a) {
                h.error = e.ErrorWriterModal(a, i, "01", "Error signing in the user");
            });
        }
        function g() {
            a.dismiss();
        }
        var h = this, i = h.constructor.$$moduleName ? h.constructor.$$moduleName : "app.layout";
        h.user = {}, h.Relogin = f, h.Cancel = g;
    }
    a.$inject = [ "$modalInstance", "tokensAPI", "auth", "access", "alert" ], angular.module("app.layout").controller("RetryModal", a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        return [ {
            name: "login",
            config: {
                url: "/login",
                templateUrl: "layout/login/login.html",
                controller: "Login",
                controllerAs: "vm",
                title: "Login"
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.layout").run(a);
}(), function() {
    "use strict";
    function a(a, b, c, d, e, f, g, h, i) {
        function j() {
            d.accessToken = null, d.isLoggedIn = !1, l.applicationName = e.appTitle + " " + e.version, 
            l.user = {}, l.loggedIn = !1;
        }
        function k() {
            d.login(), i.go("status");
        }
        var l = this;
        l.constructor.$$moduleName ? l.constructor.$$moduleName : "app.layout";
        l.Login = k, j();
    }
    a.$inject = [ "tools", "$window", "Idle", "access", "config", "alert", "tokensAPI", "usersAPI", "$state" ], 
    angular.module("app.layout").controller("Login", a);
}(), function() {
    function a(a, b, c, d, e, f) {
        function g() {
            return m.filter(function(a) {
                return a.settings;
            }).sort(function(a, b) {
                return a.settings.nav - b.settings.nav;
            });
        }
        function h() {
            try {
                if (d.cookies.get("currentProjectName")) return k.ProjectLoaded = !0, d.cookies.get("currentProjectName");
            } catch (a) {}
        }
        function i() {
            k.show = !1, k.ProjectLoaded = !1, k.GetCurrentProject();
        }
        function j(a) {
            if (!a.title || !e.current || !e.current.title) return !1;
            var b = a.name;
            return e.current.name.substr(0, b.length) === b;
        }
        var k = this, l = !1, m = f.getRoutes();
        k.GetCurrentProject = h, k.isCurrent = j, k.navRoutes = g(), k.ProfileLink = {
            Title: b.GetUserFullName,
            name: "profile"
        }, k.GeneralNav = c.getItem("layout.menu", "GeneralNav"), i(), a.$on("event:auth-loginRequired", function() {
            if (!l) {
                var a = d.modal.open({
                    templateUrl: "layout/generic/retry-login-modal.html",
                    controller: "RetryModal",
                    controllerAs: "vm",
                    backdrop: !1
                });
                l = !0, a.result.then(function() {
                    l = !1;
                }, function() {
                    l = !1;
                });
            }
        }), a.$on("event:auth-loginConfirmed", function() {}), a.$watch(function() {
            return b.isLoggedIn;
        }, function(a) {
            k.show = a;
        }), a.$watch(function() {
            return b.GetUserFullName();
        }, function(a) {
            k.ProfileLink.Title = b.GetUserFullName();
        }), a.$watch(function() {
            return d.cookies.get("currentProjectName");
        }, function(a) {
            k.ProjectLoaded = a;
        });
    }
    a.$inject = [ "$scope", "access", "jsonStorage", "tools", "$state", "router" ], 
    angular.module("app.layout").controller("Menu", a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        return [ {
            name: "profile",
            config: {
                url: "/profile",
                templateUrl: "layout/profile/profile.html",
                helpPage: "Profile",
                controller: "Profile",
                controllerAs: "vm",
                title: "Profile"
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.layout").run(a);
}(), function() {
    function a(a, b, c, d, e, f) {
        function g() {
            l.user = d.getUser();
        }
        function h(a, b) {
            l.isEditingInput = !0, "name" === a ? (l.displayNameEdit = !0, l.tempInput.name = b) : (l.emailEdit = !0, 
            l.tempInput.email = b);
        }
        function i(a) {
            l.isEditingInput = !1, "name" === a ? l.displayNameEdit = !1 : l.emailEdit = !1;
        }
        function j(b) {
            "name" === b ? l.user.displayName = l.tempInput.name || l.user.name : l.user.email = l.tempInput.email, 
            a.EditUser(l.user).then(function(a) {
                l.user = a, d.user = a;
            }, e.ErrorWriter(m, "02", "Error updating user")), l.displayNameEdit = !1, l.emailEdit = !1, 
            l.tempInput = {}, l.isEditingInput = !1;
        }
        function k(g) {
            a.UpdatePassword(l.user.id, g).then(function() {
                e.SuccessWriter("updated password!");
                var a = $.base64.encode(l.user.name + ":" + g.verifyNewPwd), h = "Basic " + a;
                b.GetToken(h).then(function(a) {
                    c.watch(), l.user = a.user, d.Login(a).then(function() {
                        g.currentPwd = "", g.newPwd = "", g.verifyNewPwd = "", l.profileForm.$setPristine(), 
                        f.log.info("replaced old token with new token");
                    });
                }, e.ErrorWriter(m, "04", "Failed to re-login user"));
            }, e.ErrorWriter(m, "03", "Error updating password"));
        }
        var l = this, m = l.constructor.$$moduleName ? l.constructor.$$moduleName : "app.layout";
        l.displayNameUnlocked = !1, l.emailUnlocked = !1, l.tempInput = {}, l.isEditingInput = !1, 
        l.StartEditInput = h, l.DiscardInputChanges = i, l.SaveChangesInput = j, l.ChangePassword = k, 
        g();
    }
    a.$inject = [ "usersAPI", "tokensAPI", "Idle", "access", "alert", "tools" ], angular.module("app.layout").controller("Profile", a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        return [ {
            name: "signup",
            config: {
                url: "/signup",
                templateUrl: "layout/signup/signup.html",
                controller: "SignUp",
                controllerAs: "vm",
                title: "Sign Up"
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.layout").run(a);
}(), function() {
    function a(a, b, c, d) {
        function e() {
            return f.IsWorking = !0, f.modelUser.password !== f.modelUser.verifyPassword ? (a.ErrorWriterNoCallback(g, "02", "Passwords do not match"), 
            f.signupForm.verifyPassword.$invalid = !0, f.signupForm.verifyPassword.$valid = !1, 
            f.signupForm.verifyPassword.valdrViolations = [ {
                field: "verifyPassword",
                message: "Must match the password",
                type: "User",
                valid: "false",
                value: f.modelUser.verifyPassword
            } ], void (f.IsWorking = !1)) : (c.user = {
                name: f.modelUser.name,
                displayName: f.modelUser.name
            }, void d.go("login"));
        }
        var f = this, g = f.constructor.$$moduleName ? f.constructor.$$moduleName : "app.layout";
        f.SignUp = e;
    }
    a.$inject = [ "alert", "tools", "access", "$state" ], angular.module("app.layout").controller("SignUp", a);
}(), function() {
    function a(a, b, c, d, e, f, g, h, i, j, k, l) {
        function m() {
            x(), o();
        }
        function n() {
            I.loadMitigatingCtrlsTip = dict.LoadMitigatingCtrlsRAQButton, I.loadMotiveCapacityTip = dict.LoadMotiveCapacityContractRAQButton, 
            I.loadIOPTip = dict.LoadIoPRAQButton, I.saveTip = dict.DiskIcon, I.pencilTip = dict.PencilIcon, 
            I.cancelTip = dict.CancelIcon;
        }
        function o() {
            var a = function(a) {
                I.currentRecipe = a, d.log.info("recipe:"), d.log.info(a), i.ComputeProjectThreshold(I.currentProject.name).then(function(a) {
                    I.privacyAndSecuritySlider.SetThresholdRecipe(I.currentRecipe, y), I.privacyAndSecuritySlider.LoadPDF = function() {
                        p("#privacyAndSecurity");
                    }, I.privacyAndSecuritySlider.DeletePDF = function() {
                        q("Privacy & Security Assessment", "securityControls");
                    }, I.recipientTrustSlider.SetThresholdRecipe(I.currentRecipe, y), I.recipientTrustSlider.LoadPDF = function() {
                        p("#recipientTrust");
                    }, I.recipientTrustSlider.DeletePDF = function() {
                        q("Recipient Trust Assessment", "recipientTrust");
                    }, I.iopSlider.SetThresholdRecipe(I.currentRecipe, y), I.iopSlider.DeletePDF = function() {
                        r();
                    }, s(a), I.HasLoaded = !0;
                }, function(a) {
                    d.log.info(a), d.log.info("error getting default thresholds!"), c.ErrorWriterNoCallback(J, "22", "Error getting thresholds", a), 
                    f.go("status");
                });
            };
            return j.GetRMRecipe(I.currentProject.name).then(a, function() {
                var b = {
                    name: I.currentProject.name
                };
                j.CreateRMRecipe(I.currentProject.name, b).then(a, c.ErrorWriter(J, "33", "Error creating recipe"));
            });
        }
        function p(a) {
            d.timeout(function() {
                angular.element(a).trigger("click");
            }, 1);
        }
        function q(a, b) {
            d.modal.open({
                templateUrl: "layout/generic/action-modal.html",
                controller: "ActionModal",
                controllerAs: "vm",
                resolve: {
                    object: function() {
                        return a;
                    },
                    action: function() {
                        return "remove";
                    },
                    explanation: function() {
                        return "";
                    }
                }
            }).result.then(function(a) {
                a && h.RemoveForm(I.currentProject.name, b).then(function() {
                    i.ComputeProjectThreshold(I.currentProject.name).then(function(a) {
                        s(a);
                    }, c.ErrorWriter(J, "28", "Error computing threshold"));
                }, c.ErrorWriter(J, "29", "Error deleting PDF"));
            });
        }
        function r() {
            d.modal.open({
                templateUrl: "layout/generic/action-modal.html",
                controller: "ActionModal",
                controllerAs: "vm",
                resolve: {
                    object: function() {
                        return "Data Sensitivity form";
                    },
                    action: function() {
                        return "remove";
                    },
                    explanation: function() {
                        return "";
                    }
                }
            }).result.then(function(a) {
                a && (I.currentProject.privacy = null, j.UpdateProject(I.currentProject).then(function(a) {
                    I.currentProject = a, i.ComputeProjectThreshold(I.currentProject.name).then(function(a) {
                        s(a);
                    }, c.ErrorWriter(J, "30", "Error computing threshold"));
                }, c.ErrorWriter(J, "31", "Error filling out Data Sensitivity Assessment")));
            });
        }
        function s(a) {
            I.iopSlider.SetSliderValue(a.scores.privacy), I.privacyAndSecuritySlider.SetSliderValue(a.scores.securityControls), 
            I.recipientTrustSlider.SetSliderValue(a.scores.recipientTrust);
        }
        function t(a) {
            a && ("custom" === a.id ? (I.customPopulation = !0, -1 === a.size && (a.size = 0)) : (I.customPopulation = !1, 
            I.CustomPopulationEdit = !1), C());
        }
        function u() {
            delete I.currentRecipe.scores, d.log.info("resetValues"), d.log.info(I.currentRecipe), 
            y(I.currentRecipe);
        }
        function v(a, b) {
            d.modal.open({
                templateUrl: "measurementResults/modals/iop-form.html",
                controller: "DataSensitivityForm",
                controllerAs: "vm",
                resolve: {
                    currentProject: function() {
                        return I.currentProject;
                    },
                    formTemplate: function() {
                        return a;
                    },
                    formResponse: function() {
                        return b;
                    }
                }
            }).result.then(function(a) {
                a && (I.currentProject = a, delete I.currentRecipe.scores.privacy, y(I.currentRecipe));
            });
        }
        function w() {
            g.GetForm("privacy").then(function(a) {
                v(a, I.currentProject.privacy);
            }, c.ErrorWriter(J, "35", "Error getting Data Sensitivity assessment"));
        }
        function x() {
            if (d.Exists(I.currentProject.model.prevalence)) {
                var a = d.ExtractElement(I.PopulationSizes, "size", I.currentProject.model.population);
                d.log.info(a), a ? I.dataDetails.populationItem = a : (I.dataDetails.populationItem = I.PopulationSizes[2], 
                I.dataDetails.populationItem.size = I.currentProject.model.population, I.customPopulation = !0);
            } else I.dataDetails.populationItem = I.PopulationSizes[0], I.dataDetails.populationItem.size = I.PopulationSizes[0].size;
            I.dataDetails.tempPrevalence = d.Exists(I.currentProject.model.prevalence) ? (100 * I.currentProject.model.prevalence).toPrecision(6) : 100, 
            I.dataDetails.sexSpecific = d.Exists(I.currentProject.model.prevalence) ? I.currentProject.model.sexSpecific : !1, 
            I.dataDetails.t2 = {}, d.Exists(I.currentProject.model.t2Enabled) ? (I.dataDetails.t2Enabled = I.currentProject.model.t2Enabled, 
            I.currentProject.model.t2Population ? (I.dataDetails.samePopulation = !1, I.dataDetails.t2Population = I.currentProject.model.t2Population) : I.dataDetails.samePopulation = !0) : (I.dataDetails.t2Enabled = !0, 
            I.dataDetails.samePopulation = !0, I.dataDetails.t2Population = 0), I.madeChanges = !1, 
            I.HasLoaded = !0;
        }
        function y(a) {
            d.log.info(a), j.UpdateRMRecipe(I.currentProject.name, a).then(function(a) {
                d.log.info(a), I.currentRecipe = a, i.ComputeProjectThreshold(I.currentProject.name).then(function(a) {
                    I.privacyAndSecuritySlider.SetThresholdRecipe(I.currentRecipe, y), I.recipientTrustSlider.SetThresholdRecipe(I.currentRecipe, y), 
                    I.iopSlider.SetThresholdRecipe(I.currentRecipe, y), s(a);
                }, c.ErrorWriter(J, "18", "Error computing threshold"));
            }, c.ErrorWriter(J, "19", "Error updating recipe"));
        }
        function z() {
            I.currentProject.model && I.currentProject.model.tables && (I.currentProject.model.tables.length > 1 ? f.go("edit") : f.go("add.summary"));
        }
        function A(a, b) {
            if (a.files[0]) {
                I.currentSelectedFile = a.files[0];
                var d = io.ValidateFile(a.files[0], I.SupportedFileFormats);
                d ? (I.currentSelectedFile = null, 1 === d && c.ErrorWriterNoCallback(J, "20", "Selected file is too big to upload"), 
                2 === d && c.ErrorWriterNoCallback(J, "21", "No support for this type of file: " + a.files[0].type), 
                I.currentSelectedFile = "") : ("ds" === b && I.privacyAndSecuritySlider.UploadPDF(I.currentProject.name, I.currentSelectedFile), 
                "rs" === b && I.recipientTrustSlider.UploadPDF(I.currentProject.name, I.currentSelectedFile)), 
                a.value = null;
            }
        }
        function B(a) {
            I.currentProject.model.prevalence = (.01 * a.tempPrevalence).toPrecision(6), I.currentProject.model.population = a.populationItem.size, 
            I.currentProject.model.sexSpecific = a.sexSpecific, I.currentProject.model.t2Enabled = a.t2Enabled, 
            I.currentProject.model.t2Population = null, a.t2Enabled && a.samePopulation === !1 && (I.currentProject.model.t2Population = a.t2Population), 
            a.t2Enabled && a.samePopulation === !0 && (I.currentProject.model.t2Population = null);
        }
        function C() {
            I.dataDetailsForm.$valid && (I.CustomPopulationEdit = !1, I.CustomT2PopulationEdit = !1, 
            I.prevEdit = !1, I.isEditingInput = !1, B(I.dataDetails), j.UpdateProject(I.currentProject).then(function(a) {
                d.log.info("updated project"), I.currentProject = a;
            }, c.ErrorWriter(J, "12", "Error updating the project")));
        }
        function D(a, b) {
            I.isEditingInput = !0, "pop" === a ? (I.CustomPopulationEdit = !0, I.tempInput.pop = b) : "t2pop" === a ? (I.CustomT2PopulationEdit = !0, 
            I.tempInput.t2pop = b) : (I.prevEdit = !0, I.tempInput.prev = b);
        }
        function E(a) {
            I.isEditingInput = !1, "pop" === a ? I.CustomPopulationEdit = !1 : "t2pop" === a ? I.CustomT2PopulationEdit = !1 : I.prevEdit = !1;
        }
        function F(a) {
            if (a.isModelValid) return I.ModelInvalidMessages = "", I.ModelInvalid = !1, !0;
            I.ModelInvalid = !0;
            var b = {
                data: {
                    errorMessage: Array.from(new Set(a.modelValidationErrors)).map(function(a) {
                        return a;
                    })
                }
            };
            return c.ErrorWriterNoCallback(J, "89", a.modelValidationErrors[0], b), !1;
        }
        function G() {
            function a() {
                var a = angular.copy(I.currentProject), b = a.riskAssessmentName === a.name;
                b || (a.riskAssessmentName = a.name), j.UpdateProject(a).then(function(b) {
                    a = b, c.SuccessWriter("started measurement"), j.MeasureRiskAsync(I.currentProject.name, l).then(d.timeout(function() {
                        f.go("status");
                    }, 700), c.ErrorWriter(J, "09", "Error measuring the risk"));
                }, c.ErrorWriter(J, "12", "Error updating the project"));
            }
            var b = modelTools.AreAllDIsMasked(I.currentProject.model.tables), e = modelTools.AreAllQIsMasked(I.currentProject.model.tables), g = F(I.currentProject);
            return b && e ? (c.ErrorWriterNoCallback(J, "11", "You do not have anything to measure risk on"), 
            void f.setRouteStates([ "deidentify" ], !1)) : void (b || "eclipse" === I.appId ? g && a() : d.modal.open({
                templateUrl: "layout/generic/action-modal.html",
                controller: "ActionModal",
                controllerAs: "vm",
                resolve: {
                    object: function() {
                        return "risk measurement";
                    },
                    action: function() {
                        return "continue";
                    },
                    explanation: function() {
                        return "You have unmasked Direct Identifiers.";
                    }
                }
            }).result.then(function(b) {
                b && g && a();
            }));
        }
        function H() {
            var a = modelTools.AreAllDIsMasked(I.currentProject.model.tables), b = modelTools.AreAllQIsMasked(I.currentProject.model.tables), d = F(I.currentProject);
            return a && b ? (c.ErrorWriterNoCallback(J, "12", "You do not have anything to apply de-identification to"), 
            void f.setRouteStates([ "deidentify" ], !1)) : void (d && (B(I.dataDetails), j.UpdateProject(I.currentProject).then(function(a) {
                I.currentProject = a, f.getRouteState("measurementResults") ? f.go("measurementResults") : f.go("deidentify", !0);
            }, c.ErrorWriter(J, "65", "Error updating the project"))));
        }
        var I = this, J = I.constructor.$$moduleName ? I.constructor.$$moduleName : "app.listen";
        a.SelectFile = A, I.currentProject = k, I.appId = b.appId, I.HasLoaded = !1, I.SupportedFileFormats = [ "application/pdf" ], 
        I.ResetValues = u, I.OpenIOP = w, I.currentRiskSettings = {}, I.dataDetails = {}, 
        I.tempInput = {}, I.CustomPopulation = t, I.SaveModel = C, I.isEditingInput = !1, 
        I.StartEditInput = D, I.DiscardInputChanges = E, I.GoBack = z, I.RunRiskMeasurement = G, 
        I.SkipToDeid = H, I.PopulationSizes = e.getItem("context", "PopulationSizes"), I.privacyAndSecuritySlider = new slider("securityControls", 2, 0, 3, [ "None", "Low", "HIPAA", "High" ]), 
        I.recipientTrustSlider = new slider("recipientTrust", 1, 0, 3, [ "None", "Low", "Medium", "High" ]), 
        I.iopSlider = new slider("privacy", 3, 0, 7, [ "Low:0", "1", "2", "3", "4", "5", "6", "High:7" ]), 
        n(), m();
    }
    a.$inject = [ "$scope", "config", "alert", "tools", "jsonStorage", "router", "defaultriskassessmentsAPI", "riskassessmentsAPI", "thresholdsAPI", "projectsAPI", "currentProject", "measurementRecipe" ], 
    angular.module("app.listen").controller("Listen", a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        function a(a, b, d, e, f) {
            var g = d.cookies.get("currentProjectName");
            return angular.isDefined(g) ? a.GetProject(g).then(function(c) {
                return d.log.info(c), angular.isDefined(c.model) || (b.ErrorWriterNoCallback("app.listen", "18", "No model exists for this project."), 
                e.go("status")), angular.isDefined(c.model.prevalence) ? c : (c.riskAssessmentName = c.name, 
                c.model.population = f.getItem("context", "PopulationSizes")[0].size, c.model.prevalence = 1, 
                a.UpdateProject(c).then(function(a) {
                    return d.log.info("updated project"), a;
                }, b.ErrorWriter("app.listen", "12", "Error updating the project")));
            }, function(a) {
                c && b.ErrorWriterNoCallback("app.listen", "22", "Error getting project", a), e.go("status");
            }) : (b.ErrorWriterNoCallback("app.listen", "99", "Project is not loaded"), e.resetRoutes(), 
            e.go("status"), void (c = !1));
        }
        function b(a, b, d, e, f) {
            if ("lexicon" !== b.appId) {
                var g = f.cookies.get("currentProjectName");
                return a.GetMeasurementRecipe(g, g + "_measurement").then(function(a) {
                    return f.log.info(a), a;
                }, function(a) {
                    c && e.ErrorWriterNoCallback("app.listen", "53", "Error getting measurement recipe", a), 
                    d.go("status");
                });
            }
            return null;
        }
        var c = !0;
        return b.$inject = [ "projectsAPI", "config", "router", "alert", "tools" ], a.$inject = [ "projectsAPI", "alert", "tools", "router", "jsonStorage" ], 
        [ {
            name: "listen",
            config: {
                url: "/listen",
                templateUrl: "listen/listen.html",
                controller: "Listen",
                controllerAs: "vm",
                title: "Listen",
                helpPage: "Listen",
                settings: {
                    nav: 4,
                    content: '<i class="fa fa-music fa-lg pad-right-2 pad-top"></i><b>Listen</b>',
                    enabled: !1
                },
                resolve: {
                    currentProject: a,
                    measurementRecipe: b
                }
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.listen").run(a);
}(), function() {
    "use strict";
    function a(a) {
        a.configureRoutes(b());
    }
    function b() {
        return [ {
            name: "status",
            config: {
                url: "/status",
                templateUrl: "status/status.html",
                controller: "Status",
                controllerAs: "vm",
                title: "Home",
                helpPage: "Home",
                settings: {
                    nav: 1,
                    content: '<i class="fa fa-home fa-lg pad-right-2 pad-top"></i><b>Home</b>',
                    enabled: !0
                }
            }
        } ];
    }
    a.$inject = [ "router" ], angular.module("app.status").run(a);
}(), function() {
    function a(a, b, c, d, e) {
        function f(f) {
            var g = new Date(), h = {
                id: g.getUTCMilliseconds(),
                name: f.name,
                created: g,
                files: []
            };
            b.CreateProject(h), e.log.info(JSON.stringify(h)), e.log.info("Added new project: " + h.id), 
            c.SuccessWriter("created project '" + h.name + "'"), e.cookies.put("currentProjectName", h.name), 
            d.go("add"), a.close();
        }
        function g() {
            a.dismiss("cancel");
        }
        function h() {
            i.project = {};
        }
        var i = this;
        i.constructor.$$moduleName ? i.constructor.$$moduleName : "app.status";
        i.Create = f, i.cancel = g, h();
    }
    a.$inject = [ "$modalInstance", "jsonStorage", "alert", "router", "tools" ], angular.module("app.status").controller("StartProject", a);
}(), function() {
    function a(a, b, c, d, e) {
        function f() {
            g(), l.HasLoaded = !0;
        }
        function g() {
            l.CurrentProjectList = c.GetProjects(), d.log.info(l.CurrentProjectList), j();
        }
        function h(a) {
            d.cookies.put("currentProjectName", a.name), angular.isDefined(a.files) && a.files.length > 0 ? b.go("edit") : b.go("add", !0);
        }
        function i() {
            d.modal.open({
                templateUrl: "status/projectmodal/startproject-modal.html",
                controller: "StartProject",
                controllerAs: "vm"
            });
        }
        function j() {
            l.CurrentProjectList.sort(function(a, b) {
                return new Date(b.updated).getTime() - new Date(a.updated).getTime();
            });
        }
        function k(a, b) {
            d.modal.open({
                templateUrl: "layout/generic/action-modal.html",
                controller: "ActionModal",
                controllerAs: "vm",
                resolve: {
                    object: function() {
                        return a.name;
                    },
                    action: function() {
                        return "delete";
                    },
                    explanation: function() {
                        return "";
                    }
                }
            }).result.then(function(a) {
                a && (c.DeleteProject(b), g());
            });
        }
        var l = this;
        l.constructor.$$moduleName ? l.constructor.$$moduleName : "app.status";
        l.appId = e.appId, l.HasLoaded = !1, l.CurrentProjectList = [], l.LoadProject = h, 
        l.StartProject = i, l.DeleteProject = k, l.CapitalizeString = d.CapitalizeString, 
        f();
    }
    a.$inject = [ "alert", "router", "jsonStorage", "tools", "config" ], angular.module("app.status").controller("Status", a);
}();